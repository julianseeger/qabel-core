buildscript {
    ext.kotlin_version = '1.0.4'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
plugins {
    id "com.github.hierynomus.license" version "0.13.1"
}

repositories {
    mavenCentral()
    jcenter()
}

allprojects {
    String tag ='git describe --tags'.execute().text.trim()
    Boolean isTag = !tag.contains('-')
    version = isTag ? tag : 'git rev-parse HEAD'.execute().text.trim() + '-SNAPSHOT'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'

    sourceCompatibility = 1.7

    ext.sharedManifest = manifest {
        attributes 'Implementation-Version': version
        attributes 'Project': 'Qabel Core'
        attributes 'Built-From-Revision': "git rev-parse HEAD".execute().text.trim()
    }

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        testCompile 'org.hamcrest:java-hamcrest:2.0.0.0'
        testCompile 'com.natpryce:hamkrest:1.2.1.0'
        testCompile 'junit:junit:4.+'
        testCompile 'org.meanbean:meanbean:2.+'
        testCompile 'org.mockito:mockito-core:2.0.52-beta'
        testCompile 'com.nhaarman:mockito-kotlin:0.6.0'
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource + sourceSets.test.allSource
    }

    task testJar(type: Jar) {
        classifier = 'tests'
        from(sourceSets.test.output) {
            include "**"
        }
        manifest {
            from sharedManifest
            attributes 'Implementation-Title': 'Qabel Core - Test artifact'
        }
    }

    sourceSets {
        main {
            resources.srcDirs += ['src/resources/config/']
        }
        test {
            resources.srcDirs += ['src/resources/config/']
        }
    }

    jar.manifest.writeTo("$buildDir/manifest.mf")
    testJar.manifest.writeTo("$buildDir/test-manifest.mf")

    artifacts {
        archives sourcesJar
        archives testJar
    }
}

